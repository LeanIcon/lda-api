<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CourseResource\Api\Transformers\CourseTransformer;
use App\Filament\Resources\CourseResource\Pages;
use App\Filament\Resources\CourseResource\RelationManagers;
use App\Filament\Resources\CourseResource\RelationManagers\DateRelationManager;
use App\Livewire\ImageUrlGenerator;
use App\Models\Category;
use App\Models\Course;
use App\Models\CourseTrainer;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Forms\Set;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Columns\SpatieMediaLibraryImageColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\BelongsToManyRelationship;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Rupadana\ApiService\Facades\ApiService;
use Spatie\Health\Enums\Status;

class CourseResource extends Resource
{
    protected static ?string $model = Course::class;

    protected static ?string $navigationIcon = 'heroicon-o-academic-cap';

    // public static function getApiTransformer()
    // {
    //     return CourseTransformer::class;
    // }

    public static function form(Form $form): Form
    {

        return $form
            ->schema([
                Section::make()
                    ->schema([
                        Forms\Components\TextInput::make('title')
                        ->required()
                        ->maxLength(255)
                        ->live(onBlur: true)
                        ->afterStateUpdated(function (Set $set, $state) {
                            $set('slug', Str::slug($state));

                        // Extract initials for abbreviation
                        $initials = array_reduce(
                            explode(' ', $state),
                            function ($carry, $word) {
                                return $carry . strtoupper($word[0]);
                            },
                            ''
                        );

                        // Validate and set abbreviation
                        $abbreviation = Str::limit($initials, 10);
                        if (strlen($abbreviation) > 10) {
                            $set('errors', ['abbreviation' => 'Abbreviation cannot exceed 10 characters.']);
                        } else {
                            $set('abbreviation', $abbreviation);
                        }
                    }),
                    Forms\Components\TextInput::make('slug')
                        ->required()
                        ->maxLength(255)
                        ->disabled(),
                    Forms\Components\TextInput::make('abbreviation')
                        ->required()
                        ->maxLength(10)
                        ->readOnly(),
                    Forms\Components\TextInput::make('duration'),
                    Forms\Components\TextInput::make('brochure'),
                    Forms\Components\Select::make('format')
                    ->label('Delivery Mode')
                    ->options([
                        'In_person' => 'In-Person',
                        'virtual' => 'Virtual',
                        'hybrid' => 'Hybrid',
                    ]),
                    Forms\Components\TextInput::make('tag'),
                    Select::make('category.name')
                        ->label('Category')
                        ->relationship('category', 'name')
                        ->required(),
                ])
                ->columns(2)
                ->columnSpan(1),

                Section::make()
                    ->schema([
                        Forms\Components\Textarea::make('summary')
                            ->required()
                            ->columnSpanFull(),
                        Forms\Components\RichEditor::make('description')
                            ->required()
                            ->columnSpanFull(),
                ])
                ->columnSpan(1),

                Section::make()->schema([
                    Section::make()->schema([
                        FileUpload::make('banner')
                            ->image()
                            ->directory(('courses')),
                        // TextInput::make('badge_url')
                        //     ->label('Badge URL')
                        //     ->readonly(),
                    ])
                    ->columnSpan(1),
                    Section::make()->schema([
                        FileUpload::make('thumbnails')
                            ->image()
                            ->directory(('courses')),
                        // TextInput::make('badge_url')
                        //     ->label('Badge URL')
                        //     ->readonly(),
                    ])
                    ->columnSpan(1),
                    Section::make()->schema([
                        FileUpload::make('badge')
                            ->image()
                            ->directory(('courses')),
                        // TextInput::make('badge_url')
                        //     ->label('Badge URL')
                        //     ->readonly(),
                    ])
                    ->columnSpan(1),
                    Section::make()->schema([
                        FileUpload::make('cert_sample')
                            ->image()
                            ->directory(('courses')),
                        // TextInput::make('badge_url')
                        //     ->label('Badge URL')
                        //     ->readonly(),
                    ])
                    ->columnSpan(1),
                ])
                ->columns(4),

                Forms\Components\Select::make('featured'),
                Forms\Components\Select::make('status'),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                ImageColumn::make('badge'),
                Tables\Columns\TextColumn::make('title')
                    ->searchable(),
                Tables\Columns\TextColumn::make('duration')
                    ->searchable(),

                // Tables\Columns\TextColumn::make('banner')
                //     ->searchable(),
                // Tables\Columns\TextColumn::make('thumbnail')
                //     ->searchable(),
                Tables\Columns\TextColumn::make('slug')
                    ->searchable(),
                // Tables\Columns\TextColumn::make('brochure_url')
                //     ->searchable(),
                Tables\Columns\IconColumn::make('is_featured')
                    ->boolean(),
                // Tables\Columns\IconColumn::make('is_active')
                //     ->boolean(),
                Tables\Columns\TextColumn::make('format')
                    ->searchable(),
                // Tables\Columns\TextColumn::make('tag')
                //     ->searchable(),
                Tables\Columns\TextColumn::make('abbreviation')
                    ->searchable(),
                Tables\Columns\TextColumn::make('category.name')
                    ->numeric()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('course_trainer_id')
                    ->numeric()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    // public function save(array $data): void
    // {
    //     $uploadedFile = $data['image'];

    //     // Use $uploadedFile for further processing

    //     $imageUrl = ApiService::getUrl($uploadedFile); // Utilize ApiService facade
    // }
    // Add the method here
    // public function getBadgeUrlAttribute($record)
    // {
    //     $media = $record->getFirstMedia('badges');
    //     if ($media) {
    //         return $media->getUrl();
    //     }

    //     return null; // Or provide a default placeholder URL
    // }

    public static function getRelations(): array
    {
        return [
            RelationManagers\DateRelationManager::class,
            RelationManagers\PriceRelationManager::class,
            // RelationManagers\CurriculumRelationManager::class,
            RelationManagers\ResourceRelationManager::class,
            RelationManagers\TrainersRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCourses::route('/'),
            'create' => Pages\CreateCourse::route('/create'),
            'edit' => Pages\EditCourse::route('/{record}/edit'),
        ];
    }
}
